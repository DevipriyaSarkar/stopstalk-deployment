import requests, ast, time
import parsedatetime as pdt
import bs4

class Profile(object):
    def __init__(self,
                 codechef_handle="",
                 codeforces_handle="",
                 spoj_handle=""):

        self.codechef_handle = codechef_handle
        self.codeforces_handle = codeforces_handle
        self.spoj_handle = spoj_handle

    @staticmethod
    def parsetime(time_str):
        cal = pdt.Calendar()
        dt, flags = cal.parseDT(time_str)
        assert flags
        return dt

    def codechef(self):

        handle = self.codechef_handle
        user_url = "http://www.codechef.com/recent/user?user_handle=" + handle
        while 1:
            try:
                tmp = requests.get(user_url, headers={"User-Agent": "Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5"})
                if tmp.status_code == 200:
                    break
            except:
                continue

        d = ast.literal_eval(tmp.text)
        max_page = d["max_page"]
        submissions = {handle: {}}
        it = 1

        for page in xrange(0, max_page):
            user_url = "http://www.codechef.com/recent/user?user_handle=" + handle + "&page=" + str(page)
            while 1:
                try:
                    tmp = requests.get(user_url, headers={"User-Agent": "Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5"})
                    if tmp.status_code == 200:
                        break
                except:
                    continue
            d = ast.literal_eval(tmp.text)

            d = d["content"]
            submissions[handle][page] = {}
            x = bs4.BeautifulSoup(d)
            for i in x.find_all("tr"):
                try:
                    if i['class'][0] == "kol":
                        submissions[handle][page][it] = {}
                        # tos = time_of_submission
                        tos = i.contents[0].contents[0]
                        tos = str(ast.literal_eval(repr(tos).replace("\\", "")))
                        tos = Profile.parsetime(tos)
                        submissions[handle][page][it]["time"] = time.strptime(str(tos), "%Y-%m-%d %H:%M:%S")

                        # Problem name/url
                        prob = i.contents[1].contents[0]
                        prob["href"] = "http://www.codechef.com" + prob["href"]
                        submissions[handle][page][it]["problem_link"] = eval(repr(prob["href"]).replace("\\", ""))
                        submissions[handle][page][it]["problem_name"] = prob.contents[0]
    
                        # Submission status
                        stat = i.contents[2].contents[0]
                        stat = stat.find("img")["src"]
                        stat = repr(stat).replace("\\", "")
                        stat = stat[7:-5]
                        st = "AC"
                        if stat == "tick-icon":
                            st = "AC"
                        elif stat == "cross-icon":
                            st = "WA"
                        elif stat == "alert-icon":
                            st = "CE"
                        elif stat == "runtime-error":
                            st = "RE"
                        elif stat == "clock_error":
                            st = "TLE"
                        submissions[handle][page][it]["status"] = st
    
                        # Question points
                        pts = i.contents[2].contents[0].contents
                        try:
                            if  len(pts) >= 5:
                                points = pts[2] + " " + pts[4]
                            else:
                                points = pts[2]
                        except IndexError:
                            if st == "AC":
                                points = "100"
                            else:
                                points = "0"
                        submissions[handle][page][it]["points"] = points

                        # Language
                        submissions[handle][page][it]["language"] = i.contents[3].contents[0].strip()
                        it += 1
                except KeyError:
                    pass
        return submissions

    def codeforces(self):
        handle = self.codeforces_handle
        page = 1
        previd = -1

        it = 1
        submissions = {handle: {}}
        while 1:

            url = "http://codeforces.com/submissions/" + handle + "/page/" + str(page)
            tmp = requests.get(url)
            soup = bs4.BeautifulSoup(tmp.text)

            for i in soup.findAll("table", {"class": "status-frame-datatable"}):
                tbody = i
            flag = 0
            page += 1
            row = 0
            submissions[handle][page] = {}
            for i in tbody:
                if isinstance(i, bs4.element.Tag):

                    if i.contents[1].contents[0] == "#":
                        continue
                    submissions[handle][page][it] = {}
                    if row == 0:
                        currid = i.contents[1].contents[1].contents[0]
                        if currid == previd:
                            flag = 1
                            break
                    previd = currid
                    row += 1

                    # Time of submission
                    tos = i.contents[3].contents[0].strip()
                    submissions[handle][page][it]["time"] = time.strptime(tos, "%Y-%m-%d %H:%M:%S") 

                    # Problem
                    prob = i.contents[7].contents[1]
                    prob["href"] = "http://codeforces.com" + prob["href"]
                    submissions[handle][page][it]["problem_link"] = eval(repr(prob["href"]).replace("\\", ""))
                    submissions[handle][page][it]["problem_name"] = prob.contents[0].strip()

                    # Language
                    lang = i.contents[9].contents[0].strip()
                    submissions[handle][page][it]["language"] = lang

                    # Submission Status
                    status = i.contents[11].contents[1].attrs["submissionverdict"]
                    st = "AC"
                    if status == "OK":
                        st = "AC"
                    elif status == "WRONG_ANSWER":
                        st = "WA"
                    elif status == "COMPILATION_ERROR":
                        st = "CE"
                    elif status == "SKIPPED":
                        st = "SK"
                    elif status == "RUNTIME_ERROR":
                        st = "RE"
                    elif status == "TIME_LIMIT_EXCEEDED":
                        st = "TLE"
                    submissions[handle][page][it]["status"] = st
                    
                    if st == "AC":
                        points = "100"
                    else:
                        points = "0"
                    submissions[handle][page][it]["points"] = points
                    it += 1
    
            if flag == 1:
                break
        return submissions


